Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function onlyTypes(types, children, componentName) {
  if (!children.every(function (child) {
    return child && types.find(function (Type) {
      return child.type === Type;
    });
  })) {
    var typeNames = types.map(function (_ref) {
      var name = _ref.name;
      return name;
    }).join(', or ');
    return new TypeError('`' + String(componentName) + '` only accepts children of type ' + String(typeNames));
  }
  return null;
}

function isRequired(types, children, componentName) {
  if (children.length === 0) {
    var typeNames = types.map(function (_ref2) {
      var name = _ref2.name;
      return name;
    }).join(', or ');
    return new TypeError('`' + String(componentName) + '` requires at least one node of type ' + String(typeNames));
  }
  return null;
}

function childrenOfType() {
  for (var _len = arguments.length, types = Array(_len), _key = 0; _key < _len; _key++) {
    types[_key] = arguments[_key];
  }

  function validator(props, propName, componentName) {
    var prop = props[propName];
    var children = _react2['default'].Children.toArray(prop).filter(function (child) {
      return child === 0 || child;
    });
    return onlyTypes(types, children, componentName);
  }
  validator.typeName = 'childrenOfType';

  validator.isRequired = function (props, propName, componentName) {
    var prop = props[propName];
    var children = _react2['default'].Children.toArray(prop).filter(function (child) {
      return child === 0 || child;
    });
    return isRequired(types, children, componentName) || onlyTypes(types, children, componentName);
  };
  validator.isRequired.typeName = 'childrenOfType';

  return validator;
}

exports['default'] = childrenOfType;